{"version":3,"sources":["LossRecolor.tsx"],"names":["LineChartDimensionsContext","LineChartPath","useLineChart","React","StyleSheet","View","Animated","useAnimatedProps","withTiming","getYForX","parse","Defs","Svg","Rect","ClipPath","AnimatedSVG","createAnimatedComponent","LossRecolor","animationDuration","animationProps","color","width","pathWidth","at","pathProps","endPoint","height","path","useContext","currentX","isActive","data","svgProps","value","Object","assign","duration","parsedPath","useMemo","pointWidth","length","Y","rectWidth","undefined","absoluteFill"],"mappings":";;AAAA,SAASA,0BAAT,QAA2C,SAA3C;AACA,SAASC,aAAT,QAAkD,QAAlD;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,cAAjC;AACA,OAAOC,QAAP,IACEC,gBADF,EAEEC,UAFF,QAIO,yBAJP;AAKA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,qBAAhC;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,QAA1B,QAA0C,kBAA1C;AAEA,MAAMC,WAAW,GAAGT,QAAQ,CAACU,uBAAT,CAAiCJ,GAAjC,CAApB;AAaA,OAAO,SAASK,WAAT,CAAqB;AAC1BC,EAAAA,iBAAiB,GAAG,GADM;AAE1BC,EAAAA,cAAc,GAAG,EAFS;AAG1BC,EAAAA,KAAK,GAAG,OAHkB;AAI1BC,EAAAA,KAAK,EAAEC,SAAS,GAAG,CAJO;AAK1BC,EAAAA,EAAE,GAAG,CALqB;AAM1BC,EAAAA,SAAS,GAAG,EANc;AAO1BC,EAAAA;AAP0B,CAArB,EAQuB;AAC5B,QAAM;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA0BxB,KAAK,CAACyB,UAAN,CAAiB5B,0BAAjB,CAAhC;AACA,QAAM;AAAE6B,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAA+B7B,YAAY,EAAjD,CAF4B,CAI5B;;AAEA,QAAM8B,QAAQ,GAAGzB,gBAAgB,CAAC,OAAO;AACvCc,IAAAA,KAAK,EAAES,QAAQ,CAACG,KAAT,GACHJ,QAAQ,CAACI,KADN,GAEHzB,UAAU,CACRa,KADQ,EAERa,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,QAAQ,EAAElB;AAAZ,KAAd,EAA+CC,cAA/C,CAFQ;AAHyB,GAAP,CAAD,CAAjC;AAQA,QAAMkB,UAAU,GAAGlC,KAAK,CAACmC,OAAN,CAAc,MAAM5B,KAAK,CAACiB,IAAD,CAAzB,EAAiC,CAACA,IAAD,CAAjC,CAAnB;AAEA,QAAMY,UAAU,GAAGpC,KAAK,CAACmC,OAAN,CACjB,MAAMjB,KAAK,GAAGU,IAAI,CAACS,MADF,EAEjB,CAACT,IAAI,CAACS,MAAN,EAAcnB,KAAd,CAFiB,CAAnB;AAIA,QAAMoB,CAAC,GAAGhC,QAAQ,CAAC4B,UAAD,EAAaE,UAAU,GAAGhB,EAA1B,CAAlB,CApB4B,CAsB5B;AACA;;AACA,QAAMmB,SAAS,GAAGjB,QAAQ,GAAGA,QAAQ,GAAGc,UAAd,GAA2BI,SAArD,CAxB4B,CAyB5B;;AACA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEvC,UAAU,CAACwC;AAAxB,kBACE,oBAAC,WAAD;AAAa,IAAA,aAAa,EAAEZ,QAA5B;AAAsC,IAAA,MAAM,EAAEN;AAA9C,kBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEN,KADT;AAEE,IAAA,KAAK,EAAEE;AAFT,KAGME,SAHN;AAIE,IAAA,QAAQ,EAAE;AAJZ,KADF,eAOE,oBAAC,IAAD,qBACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb,kBACE,oBAAC,IAAD;AAAM,IAAA,CAAC,EAAC,GAAR;AAAY,IAAA,CAAC,EAAEiB,CAAf;AAAmB,IAAA,KAAK,EAAEC,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe,MAAvC;AAA+C,IAAA,MAAM,EAAC;AAAtD,IADF,CADF,CAPF,CADF,CADF;AAiBD","sourcesContent":["import { LineChartDimensionsContext } from './Chart';\nimport { LineChartPath, LineChartPathProps } from './Path';\nimport { useLineChart } from './useLineChart';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  withTiming,\n  WithTimingConfig,\n} from 'react-native-reanimated';\nimport { getYForX, parse } from 'react-native-redash';\nimport { Defs, Svg, Rect, ClipPath } from 'react-native-svg';\n\nconst AnimatedSVG = Animated.createAnimatedComponent(Svg);\n\ntype LineChartPathWrapperProps = {\n  animationDuration?: number;\n  animationProps?: Partial<WithTimingConfig>;\n  children?: React.ReactNode;\n  color?: string;\n  width?: number;\n  at?: number;\n  pathProps?: Partial<LineChartPathProps>;\n  endPoint?: number;\n};\n\nexport function LossRecolor({\n  animationDuration = 300,\n  animationProps = {},\n  color = 'black',\n  width: pathWidth = 3,\n  at = 0,\n  pathProps = {},\n  endPoint,\n}: LineChartPathWrapperProps) {\n  const { width, height, path } = React.useContext(LineChartDimensionsContext);\n  const { currentX, isActive, data } = useLineChart();\n\n  ////////////////////////////////////////////////\n\n  const svgProps = useAnimatedProps(() => ({\n    width: isActive.value\n      ? currentX.value\n      : withTiming(\n          width,\n          Object.assign({ duration: animationDuration }, animationProps)\n        ),\n  }));\n  const parsedPath = React.useMemo(() => parse(path), [path]);\n\n  const pointWidth = React.useMemo(\n    () => width / data.length,\n    [data.length, width]\n  );\n  const Y = getYForX(parsedPath, pointWidth * at);\n\n  // The point of this is to cut off the color override at a certain point\n  // Otherwise we can't use LineChart.Highlight\n  const rectWidth = endPoint ? endPoint * pointWidth : undefined;\n  ////////////////////////////////////////////////\n  return (\n    <View style={StyleSheet.absoluteFill}>\n      <AnimatedSVG animatedProps={svgProps} height={height}>\n        <LineChartPath\n          color={color}\n          width={pathWidth}\n          {...pathProps}\n          clipPath={'url(#clip-path-clip)'}\n        />\n        <Defs>\n          <ClipPath id=\"clip-path-clip\">\n            <Rect x=\"0\" y={Y!} width={rectWidth ?? '100%'} height=\"100%\" />\n          </ClipPath>\n        </Defs>\n      </AnimatedSVG>\n    </View>\n  );\n}\n"]}