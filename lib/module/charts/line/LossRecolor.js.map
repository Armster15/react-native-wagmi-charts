{"version":3,"sources":["LossRecolor.tsx"],"names":["React","StyleSheet","View","Defs","Svg","Rect","ClipPath","Animated","useAnimatedProps","withTiming","LineChartDimensionsContext","LineChartPath","useLineChart","getYForX","parse","AnimatedSVG","createAnimatedComponent","LossRecolor","animationDuration","animationProps","color","width","pathWidth","at","pathProps","height","path","useContext","currentX","isActive","data","svgProps","value","Object","assign","duration","parsedPath","useMemo","pointWidth","length","Y","absoluteFill"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,cAAjC;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,QAA1B,QAA0C,kBAA1C;AACA,OAAOC,QAAP,IACEC,gBADF,EAEEC,UAFF,QAGO,yBAHP;AAKA,SAASC,0BAAT,QAA2C,SAA3C;AACA,SAASC,aAAT,QAAkD,QAAlD;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,qBAAhC;AAEA,MAAMC,WAAW,GAAGR,QAAQ,CAACS,uBAAT,CAAiCZ,GAAjC,CAApB;AAaA,OAAO,SAASa,WAAT,CAAqB;AAC1BC,EAAAA,iBAAiB,GAAG,GADM;AAE1BC,EAAAA,cAAc,GAAG,EAFS;AAG1BC,EAAAA,KAAK,GAAG,OAHkB;AAI1BC,EAAAA,KAAK,EAAEC,SAAS,GAAG,CAJO;AAK1BC,EAAAA,EAAE,GAAG,CALqB;AAM1BC,EAAAA,SAAS,GAAG;AANc,CAArB,EAOuB;AAC5B,QAAM;AAAEH,IAAAA,KAAF;AAASI,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA0B1B,KAAK,CAAC2B,UAAN,CAAiBjB,0BAAjB,CAAhC;AACA,QAAM;AAAEkB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAA+BlB,YAAY,EAAjD,CAF4B,CAI5B;;AAEA,QAAMmB,QAAQ,GAAGvB,gBAAgB,CAAC,OAAO;AACvCa,IAAAA,KAAK,EAAEQ,QAAQ,CAACG,KAAT,GACHJ,QAAQ,CAACI,KADN,GAEHvB,UAAU,CACRY,KADQ,EAERY,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,QAAQ,EAAEjB;AAAZ,KAAd,EAA+CC,cAA/C,CAFQ;AAHyB,GAAP,CAAD,CAAjC;AAQA,QAAMiB,UAAU,GAAGpC,KAAK,CAACqC,OAAN,CAAc,MAAMvB,KAAK,CAACY,IAAD,CAAzB,EAAiC,CAACA,IAAD,CAAjC,CAAnB;AAEA,QAAMY,UAAU,GAAGtC,KAAK,CAACqC,OAAN,CACjB,MAAMhB,KAAK,GAAGS,IAAI,CAACS,MADF,EAEjB,CAACT,IAAI,CAACS,MAAN,EAAclB,KAAd,CAFiB,CAAnB;AAIA,QAAMmB,CAAC,GAAG3B,QAAQ,CAACuB,UAAD,EAAaE,UAAU,GAAGf,EAA1B,CAAlB,CApB4B,CAsB5B;;AACA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEtB,UAAU,CAACwC;AAAxB,kBACE,oBAAC,WAAD;AAAa,IAAA,aAAa,EAAEV,QAA5B;AAAsC,IAAA,MAAM,EAAEN;AAA9C,kBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEL,KADT;AAEE,IAAA,KAAK,EAAEE;AAFT,KAGME,SAHN;AAIE,IAAA,QAAQ,EAAE;AAJZ,KADF,eAOE,oBAAC,IAAD,qBACE,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb,kBACE,oBAAC,IAAD;AAAM,IAAA,CAAC,EAAC,GAAR;AAAY,IAAA,CAAC,EAAEgB,CAAf;AAAmB,IAAA,KAAK,EAAC,MAAzB;AAAgC,IAAA,MAAM,EAAC;AAAvC,IADF,CADF,CAPF,CADF,CADF;AAiBD","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Defs, Svg, Rect, ClipPath } from 'react-native-svg';\nimport Animated, {\n  useAnimatedProps,\n  withTiming,\n} from 'react-native-reanimated';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPath, LineChartPathProps } from './Path';\nimport { useLineChart } from './useLineChart';\nimport { getYForX, parse } from 'react-native-redash';\n\nconst AnimatedSVG = Animated.createAnimatedComponent(Svg);\n\ntype LineChartPathWrapperProps = {\n  animationDuration?: number;\n  animationProps?: Partial<Animated.WithTimingConfig>;\n  children?: React.ReactNode;\n  color?: string;\n  width?: number;\n  at?: number;\n  pathProps?: Partial<LineChartPathProps>;\n  showInactivePath?: boolean;\n};\n\nexport function LossRecolor({\n  animationDuration = 300,\n  animationProps = {},\n  color = 'black',\n  width: pathWidth = 3,\n  at = 0,\n  pathProps = {},\n}: LineChartPathWrapperProps) {\n  const { width, height, path } = React.useContext(LineChartDimensionsContext);\n  const { currentX, isActive, data } = useLineChart();\n\n  ////////////////////////////////////////////////\n\n  const svgProps = useAnimatedProps(() => ({\n    width: isActive.value\n      ? currentX.value\n      : withTiming(\n          width,\n          Object.assign({ duration: animationDuration }, animationProps)\n        ),\n  }));\n  const parsedPath = React.useMemo(() => parse(path), [path]);\n\n  const pointWidth = React.useMemo(\n    () => width / data.length,\n    [data.length, width]\n  );\n  const Y = getYForX(parsedPath, pointWidth * at);\n\n  ////////////////////////////////////////////////\n  return (\n    <View style={StyleSheet.absoluteFill}>\n      <AnimatedSVG animatedProps={svgProps} height={height}>\n        <LineChartPath\n          color={color}\n          width={pathWidth}\n          {...pathProps}\n          clipPath={'url(#clip-path-clip)'}\n        />\n        <Defs>\n          <ClipPath id=\"clip-path-clip\">\n            <Rect x=\"0\" y={Y!} width=\"100%\" height=\"100%\" />\n          </ClipPath>\n        </Defs>\n      </AnimatedSVG>\n    </View>\n  );\n}\n"]}