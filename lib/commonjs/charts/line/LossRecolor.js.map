{"version":3,"sources":["LossRecolor.tsx"],"names":["AnimatedSVG","Animated","createAnimatedComponent","Svg","LossRecolor","animationDuration","animationProps","color","width","pathWidth","at","pathProps","height","path","React","useContext","LineChartDimensionsContext","currentX","isActive","data","svgProps","value","Object","assign","duration","parsedPath","useMemo","pointWidth","length","Y","StyleSheet","absoluteFill"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAKA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,WAAW,GAAGC,+BAASC,uBAAT,CAAiCC,mBAAjC,CAApB;;AAaO,SAASC,WAAT,CAAqB;AAC1BC,EAAAA,iBAAiB,GAAG,GADM;AAE1BC,EAAAA,cAAc,GAAG,EAFS;AAG1BC,EAAAA,KAAK,GAAG,OAHkB;AAI1BC,EAAAA,KAAK,EAAEC,SAAS,GAAG,CAJO;AAK1BC,EAAAA,EAAE,GAAG,CALqB;AAM1BC,EAAAA,SAAS,GAAG;AANc,CAArB,EAOuB;AAC5B,QAAM;AAAEH,IAAAA,KAAF;AAASI,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA0BC,KAAK,CAACC,UAAN,CAAiBC,iCAAjB,CAAhC;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAA+B,iCAArC,CAF4B,CAI5B;;AAEA,QAAMC,QAAQ,GAAG,6CAAiB,OAAO;AACvCZ,IAAAA,KAAK,EAAEU,QAAQ,CAACG,KAAT,GACHJ,QAAQ,CAACI,KADN,GAEH,uCACEb,KADF,EAEEc,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,QAAQ,EAAEnB;AAAZ,KAAd,EAA+CC,cAA/C,CAFF;AAHmC,GAAP,CAAjB,CAAjB;AAQA,QAAMmB,UAAU,GAAGX,KAAK,CAACY,OAAN,CAAc,MAAM,8BAAMb,IAAN,CAApB,EAAiC,CAACA,IAAD,CAAjC,CAAnB;AAEA,QAAMc,UAAU,GAAGb,KAAK,CAACY,OAAN,CACjB,MAAMlB,KAAK,GAAGW,IAAI,CAACS,MADF,EAEjB,CAACT,IAAI,CAACS,MAAN,EAAcpB,KAAd,CAFiB,CAAnB;AAIA,QAAMqB,CAAC,GAAG,iCAASJ,UAAT,EAAqBE,UAAU,GAAGjB,EAAlC,CAAV,CApB4B,CAsB5B;;AACA,sBACE,oBAAC,iBAAD;AAAM,IAAA,KAAK,EAAEoB,wBAAWC;AAAxB,kBACE,oBAAC,WAAD;AAAa,IAAA,aAAa,EAAEX,QAA5B;AAAsC,IAAA,MAAM,EAAER;AAA9C,kBACE,oBAAC,mBAAD;AACE,IAAA,KAAK,EAAEL,KADT;AAEE,IAAA,KAAK,EAAEE;AAFT,KAGME,SAHN;AAIE,IAAA,QAAQ,EAAE;AAJZ,KADF,eAOE,oBAAC,oBAAD,qBACE,oBAAC,wBAAD;AAAU,IAAA,EAAE,EAAC;AAAb,kBACE,oBAAC,oBAAD;AAAM,IAAA,CAAC,EAAC,GAAR;AAAY,IAAA,CAAC,EAAEkB,CAAf;AAAmB,IAAA,KAAK,EAAC,MAAzB;AAAgC,IAAA,MAAM,EAAC;AAAvC,IADF,CADF,CAPF,CADF,CADF;AAiBD","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Defs, Svg, Rect, ClipPath } from 'react-native-svg';\nimport Animated, {\n  useAnimatedProps,\n  withTiming,\n} from 'react-native-reanimated';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { LineChartPath, LineChartPathProps } from './Path';\nimport { useLineChart } from './useLineChart';\nimport { getYForX, parse } from 'react-native-redash';\n\nconst AnimatedSVG = Animated.createAnimatedComponent(Svg);\n\ntype LineChartPathWrapperProps = {\n  animationDuration?: number;\n  animationProps?: Partial<Animated.WithTimingConfig>;\n  children?: React.ReactNode;\n  color?: string;\n  width?: number;\n  at?: number;\n  pathProps?: Partial<LineChartPathProps>;\n  showInactivePath?: boolean;\n};\n\nexport function LossRecolor({\n  animationDuration = 300,\n  animationProps = {},\n  color = 'black',\n  width: pathWidth = 3,\n  at = 0,\n  pathProps = {},\n}: LineChartPathWrapperProps) {\n  const { width, height, path } = React.useContext(LineChartDimensionsContext);\n  const { currentX, isActive, data } = useLineChart();\n\n  ////////////////////////////////////////////////\n\n  const svgProps = useAnimatedProps(() => ({\n    width: isActive.value\n      ? currentX.value\n      : withTiming(\n          width,\n          Object.assign({ duration: animationDuration }, animationProps)\n        ),\n  }));\n  const parsedPath = React.useMemo(() => parse(path), [path]);\n\n  const pointWidth = React.useMemo(\n    () => width / data.length,\n    [data.length, width]\n  );\n  const Y = getYForX(parsedPath, pointWidth * at);\n\n  ////////////////////////////////////////////////\n  return (\n    <View style={StyleSheet.absoluteFill}>\n      <AnimatedSVG animatedProps={svgProps} height={height}>\n        <LineChartPath\n          color={color}\n          width={pathWidth}\n          {...pathProps}\n          clipPath={'url(#clip-path-clip)'}\n        />\n        <Defs>\n          <ClipPath id=\"clip-path-clip\">\n            <Rect x=\"0\" y={Y!} width=\"100%\" height=\"100%\" />\n          </ClipPath>\n        </Defs>\n      </AnimatedSVG>\n    </View>\n  );\n}\n"]}