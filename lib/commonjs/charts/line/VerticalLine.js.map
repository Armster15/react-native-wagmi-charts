{"version":3,"sources":["VerticalLine.tsx"],"names":["LineChartVerticalLine","displayName","AnimatedLine","Animated","createAnimatedComponent","SVGLine","color","lineProps","at","width","height","React","useContext","LineChartDimensionsContext","data","lineX","useMemo","length","lineAnimatedProps","x1","x2","y1","y2"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAQAA,qBAAqB,CAACC,WAAtB,GAAoC,uBAApC;;AAEA,MAAMC,YAAY,GAAGC,+BAASC,uBAAT,CAAiCC,oBAAjC,CAArB;;AAEO,SAASL,qBAAT,CAA+B;AACpCM,EAAAA,KAAK,GAAG,MAD4B;AAEpCC,EAAAA,SAFoC;AAGpCC,EAAAA;AAHoC,CAA/B,EAIe;AACpB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoBC,eAAMC,UAAN,CAAiBC,iCAAjB,CAA1B;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,iCAAjB;;AAEA,QAAMC,KAAK,GAAGJ,eAAMK,OAAN,CACZ,MAAOP,KAAK,GAAGK,IAAI,CAACG,MAAd,GAAwBT,EADlB,EAEZ,CAACM,IAAI,CAACG,MAAN,EAAcR,KAAd,EAAqBD,EAArB,CAFY,CAAd;;AAKA,QAAMU,iBAAiB,GAAG,6CAAiB,OAAO;AAChDC,IAAAA,EAAE,EAAEJ,KAD4C;AAEhDK,IAAAA,EAAE,EAAEL,KAF4C;AAGhDM,IAAAA,EAAE,EAAE,CAH4C;AAIhDC,IAAAA,EAAE,EAAEZ;AAJ4C,GAAP,CAAjB,CAA1B;AAOA,sBACE,6BAAC,YAAD;AACE,IAAA,aAAa,EAAEQ,iBADjB;AAEE,IAAA,MAAM,EAAEZ;AAFV,KAGMC,SAHN,EADF;AAOD","sourcesContent":["import React from 'react';\nimport { Line as SVGLine, LineProps } from 'react-native-svg';\nimport { LineChartDimensionsContext } from './Chart';\nimport { useLineChart } from './useLineChart';\nimport Animated, { useAnimatedProps } from 'react-native-reanimated';\n\ntype VerticalLineProps = {\n  color?: string;\n  lineProps?: Partial<LineProps>;\n  at: number;\n};\n\nLineChartVerticalLine.displayName = 'LineChartVerticalLine';\n\nconst AnimatedLine = Animated.createAnimatedComponent(SVGLine);\n\nexport function LineChartVerticalLine({\n  color = 'gray',\n  lineProps,\n  at,\n}: VerticalLineProps) {\n  const { width, height } = React.useContext(LineChartDimensionsContext);\n  const { data } = useLineChart();\n\n  const lineX = React.useMemo(\n    () => (width / data.length) * at,\n    [data.length, width, at]\n  );\n\n  const lineAnimatedProps = useAnimatedProps(() => ({\n    x1: lineX,\n    x2: lineX,\n    y1: 0,\n    y2: height,\n  }));\n\n  return (\n    <AnimatedLine\n      animatedProps={lineAnimatedProps}\n      stroke={color}\n      {...lineProps}\n    />\n  );\n}\n"]}